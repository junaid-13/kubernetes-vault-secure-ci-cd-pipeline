pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "junaid0049/sample-app:latest"
        K8S_DEPLOYMENT = "k8s/deployment.yaml"
        SERVICE_DEPLOYMENT = "k8s/service.yaml"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Cloning repository..."
                git url: 'https://github.com/junaid-13/sample-app.git', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                withCredentials([string(credentialsId: 'DOCKER_HUB_PASSWORD', variable: 'DOCKER_PASS')]) {
                    sh """
                    echo ${DOCKER_PASS} | docker login -u junaid0049 --password-stdin
                    docker push ${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Fetch Secrets from Vault') {
            steps {
                withVault(vaultSecrets: [[
                    path: 'secret/data/app',
                    engineVersion: 2,
                    secretValues: [[envVar: 'API_KEY', vaultKey: 'API_KEY']]
                ]]) {
                    echo "API Key from Vault: ${env.API_KEY}"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo "Applying Kubernetes Deployment..."
                sh "kubectl apply -f ${K8S_DEPLOYMENT}"
            }
        }

        stage ('AWS Kubernetes Deployment') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_KEY'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET')
                ]) {
                    sh """
                    set -x
                    aws eks --region us-east-1 update-kubeconfig --name devops-cluster
                    kubectl apply -f ${K8S_DEPLOYMENT}
                    kubectl apply -f ${SERVICE_DEPLOYMENT}
                    kubectl get pods
                    kubectl get svc
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                echo "Checking Kubernetes pods..."
                sh "kubectl get pods"
                sh "kubectl get svc"
            }
        }
    }

    post {
        success {
            echo "✅ Deployment successful!"
        }
        failure {
            echo "❌ Deployment failed. Check logs!"
        }
    }
}
